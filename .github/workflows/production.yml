name: Production Environment

# Workflow para deploy do ambiente de produção
# Executado apenas quando há push na branch main
# Realiza testes, linting, build, deploy para Vercel (ambiente production)
# e criação automática de tags de release

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  push:
    branches:
      - main

jobs:
  test-and-lint:
    name: Test & Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            .vite
            node_modules/.cache
            .eslintcache
          key: build-${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            build-${{ runner.os }}-node-${{ matrix.node-version }}-
      - name: Run linter
        run: pnpm run lint
        env:
          ESLINT_CACHE: .eslintcache
      - name: Run tests
        run: pnpm run test:ci

  update-version:
    name: Update Version in Release Branch
    if: startsWith(github.ref, 'refs/heads/release/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "pnpm"

      - name: Get version from release branch
        id: get_version
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed 's|refs/heads/release/||')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAG_VERSION=v$VERSION" >> $GITHUB_ENV

      - name: Check if tag already exists (to skip if already processed)
        id: check_tag
        run: |
          git fetch --tags
          if git rev-parse "refs/tags/${{ env.TAG_VERSION }}" >/dev/null 2>&1; then
            echo "Tag ${{ env.TAG_VERSION }} already exists. Skipping version update and tag creation."
            echo "SKIP_ALL=true" >> $GITHUB_OUTPUT
          else
            echo "Tag ${{ env.TAG_VERSION }} does not exist. Proceeding with version update and tag creation."
            echo "SKIP_ALL=false" >> $GITHUB_OUTPUT
          fi

      - name: Update version in package.json and commit
        if: steps.check_tag.outputs.SKIP_ALL == 'false'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          pnpm version ${{ env.VERSION }} --no-git-tag-version
          git add package.json pnpm-lock.yaml
          git commit -m "chore: Bump version to ${{ env.VERSION }}"
          git push

  deploy-environment:
    name: Deploy to Environment
    needs: test-and-lint
    runs-on: ubuntu-latest
    # Define o ambiente dinamicamente com base na branch
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'Production' || (startsWith(github.ref, 'refs/heads/release/') && 'Preview' || 'Develop') }}
      url: ${{ steps.deploy_step.outputs.deployment_url }}

    permissions:
      deployments: write
      contents: read

    steps:
      - name: Create GitHub Deployment
        id: deployment
        uses: bobheadxi/deployments@v1.5.0
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: ${{ github.ref == 'refs/heads/main' && 'Production' || (startsWith(github.ref, 'refs/heads/release/') && 'Preview' || 'Develop') }}
          ref: ${{ github.ref }}
          override: ${{ github.ref != 'refs/heads/main' }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Vercel CLI
        uses: actions/cache@v4
        with:
          path: ~/.vercel
          key: vercel-cli-${{ runner.os }}
          restore-keys: |
            vercel-cli-${{ runner.os }}

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          else
            vercel pull --yes --token=${{ secrets.VERCEL_TOKEN }}
          fi

      - name: Build Project Artifacts
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          else
            vercel build --token=${{ secrets.VERCEL_TOKEN }}
          fi

      # --- FASE 2: EXECUTAR O DEPLOY NA VERCEL ---
      - name: Deploy to Vercel and Capture URL
        id: deploy_step
        run: |
          echo "VERCEL_ENV: $VERCEL_ENV"

          DEPLOY_COMMAND=""
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            DEPLOY_COMMAND="vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}"
          else
            DEPLOY_COMMAND="vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}"
          fi

          if DEPLOY_URL=$($DEPLOY_COMMAND); then
            echo "Deployment successful."
            echo "deployment_url=$DEPLOY_URL" >> $GITHUB_OUTPUT
          else
            DEPLOY_STATUS=$?
            echo "Error: Vercel deploy failed with exit code $DEPLOY_STATUS."
            exit $DEPLOY_STATUS
          fi

      # --- FASE 3: ATUALIZAR O STATUS FINAL DO DEPLOYMENT (SUCESSO OU FALHA) ---
      - name: Update GitHub Deployment Status
        if: always()
        uses: bobheadxi/deployments@v1.5.0
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          env: ${{ github.ref == 'refs/heads/main' && 'Production' || (startsWith(github.ref, 'refs/heads/release/') && 'Preview' || 'Develop') }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: ${{ steps.deploy_step.outputs.deployment_url }}

  tag-release:
    name: Create Git Tag
    needs: deploy-environment
    # Só roda se for a branch 'main' E o deploy tiver sido um sucesso
    if: github.ref == 'refs/heads/main' && needs.deploy-environment.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from package.json
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAG_VERSION=v$VERSION" >> $GITHUB_ENV

      - name: Check if tag already exists
        id: check_tag
        run: |
          git fetch --tags
          if git rev-parse "refs/tags/${{ env.TAG_VERSION }}" >/dev/null 2>&1; then
            echo "Tag ${{ env.TAG_VERSION }} already exists. Skipping tag creation."
            echo "SKIP_TAG=true" >> $GITHUB_OUTPUT
          else
            echo "Tag ${{ env.TAG_VERSION }} does not exist. Proceeding with tag creation."
            echo "SKIP_TAG=false" >> $GITHUB_OUTPUT
          fi

      - name: Create and Push Tag
        if: steps.check_tag.outputs.SKIP_TAG == 'false'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ env.TAG_VERSION }} -m "Release ${{ env.TAG_VERSION }}"
          git push origin ${{ env.TAG_VERSION }}

  upload-error-logs:
    name: Upload Error Logs
    needs: [test-and-lint, deploy-environment, tag-release]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate error logs
        run: |
          echo "=== GitHub Actions Run Summary ===" > error-logs.txt
          echo "Repository: ${{ github.repository }}" >> error-logs.txt
          echo "Workflow: ${{ github.workflow }}" >> error-logs.txt
          echo "Run ID: ${{ github.run_id }}" >> error-logs.txt
          echo "Run Number: ${{ github.run_number }}" >> error-logs.txt
          echo "Branch: ${{ github.ref }}" >> error-logs.txt
          echo "SHA: ${{ github.sha }}" >> error-logs.txt
          echo "Actor: ${{ github.actor }}" >> error-logs.txt
          echo "Event: ${{ github.event_name }}" >> error-logs.txt
          echo "" >> error-logs.txt
          echo "=== Job Status ===" >> error-logs.txt
          echo "test-and-lint: ${{ needs.test-and-lint.result }}" >> error-logs.txt
          echo "deploy-environment: ${{ needs.deploy-environment.result }}" >> error-logs.txt
          echo "tag-release: ${{ needs.tag-release.result }}" >> error-logs.txt
          echo "" >> error-logs.txt
          echo "=== Environment Variables ===" >> error-logs.txt
          env | grep -E "(NODE|PNPM|VERCEL|GITHUB)" | sort >> error-logs.txt || true
          echo "" >> error-logs.txt
          echo "=== System Information ===" >> error-logs.txt
          uname -a >> error-logs.txt
          node --version >> error-logs.txt 2>&1 || echo "Node.js not available" >> error-logs.txt
          pnpm --version >> error-logs.txt 2>&1 || echo "pnpm not available" >> error-logs.txt

      - name: Upload error logs
        if: needs.test-and-lint.result == 'failure' || needs.deploy-environment.result == 'failure' || needs.tag-release.result == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: error-logs-production-${{ github.run_number }}
          path: error-logs.txt
          retention-days: 30

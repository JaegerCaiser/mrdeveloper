name: Production Environment

# Workflow para deploy do ambiente de produção
# Executado apenas quando há push na branch main
# Realiza testes, linting, build, deploy para Vercel (ambiente production)
# e criação automática de tags de release

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  push:
    branches:
      - main

jobs:
  test-and-lint:
    uses: ./.github/workflows/reusable-test-and-lint.yml
    with:
      node-version: "22.x"

  deploy-production:
    needs: test-and-lint
    uses: ./.github/workflows/reusable-deploy-vercel.yml
    with:
      environment: production
      ref: ${{ github.ref }}
      prebuilt: true
      prod: true
    secrets:
      vercel-token: ${{ secrets.VERCEL_TOKEN }}
      github-token: ${{ secrets.GITHUB_TOKEN }}

  tag-release:
    needs: deploy-production
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "pnpm"

      - name: Get version from package.json
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TAG_VERSION=v$VERSION" >> $GITHUB_ENV

      - name: Check if tag already exists
        id: check_tag
        run: |
          git fetch --tags
          if git rev-parse "refs/tags/${{ env.TAG_VERSION }}" >/dev/null 2>&1; then
            echo "Tag ${{ env.TAG_VERSION }} already exists. Skipping release."
            echo "SKIP_ALL=true" >> $GITHUB_OUTPUT
          else
            echo "Tag ${{ env.TAG_VERSION }} does not exist. Proceeding with release."
            echo "SKIP_ALL=false" >> $GITHUB_OUTPUT
          fi

      - name: Update version and create tag
        if: steps.check_tag.outputs.SKIP_ALL == 'false'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          pnpm version ${{ env.VERSION }} --no-git-tag-version
          git add package.json pnpm-lock.yaml
          git commit -m "chore: Bump version to ${{ env.VERSION }}"
          git tag ${{ env.TAG_VERSION }} -m "Release ${{ env.TAG_VERSION }}"
          git push
          git push origin ${{ env.TAG_VERSION }}

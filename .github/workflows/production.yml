name: Vercel Production Deployment and Tagging

# Variáveis de ambiente para os jobs da Vercel
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  push:
    branches:
      - main

jobs:
  # -----------------------------------------------------------------
  # JOB 1: Testa e Linta o código
  # -----------------------------------------------------------------
  test-and-lint:
    name: Test & Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm run lint

      - name: Run tests
        run: pnpm run test:ci

  # -----------------------------------------------------------------
  # JOB 2: Deploy para Produção (Vercel)
  # -----------------------------------------------------------------
  deploy-production:
    name: Deploy to Production
    needs: test-and-lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  # -----------------------------------------------------------------
  # JOB 3: Criar Tag de Versão
  # -----------------------------------------------------------------
  tag-release:
    name: Tag Release
    needs: deploy-production
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Necessário para buscar tags existentes
          fetch-depth: 0

      - name: Get version from package.json
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "TAG_VERSION=v$VERSION" >> $GITHUB_ENV

      - name: Check if tag already exists
        id: check_tag
        run: |
          if git rev-parse "refs/tags/${{ env.TAG_VERSION }}" >/dev/null 2>&1; then
            echo "Tag ${{ env.TAG_VERSION }} already exists. Skipping..."
            echo "SKIP_TAG=true" >> $GITHUB_ENV
          else
            echo "Tag ${{ env.TAG_VERSION }} does not exist. Proceeding..."
            echo "SKIP_TAG=false" >> $GITHUB_ENV
          fi

      - name: Create and Push Tag
        if: env.SKIP_TAG == 'false'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ env.TAG_VERSION }} -m "Release ${{ env.TAG_VERSION }}"
          git push origin ${{ env.TAG_VERSION }}

name: Preview Environment

# Workflow para deploy do ambiente de preview/staging
# Executado em:
# - Pull Requests (para preview de mudanÃ§as)
# - Push em branches release/* (para testes de release)
# Realiza testes, linting, build, deploy para Vercel (ambiente preview)
# e atualizaÃ§Ã£o automÃ¡tica de comentÃ¡rios nos PRs

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - release/**
  workflow_dispatch:

jobs:
  test-and-lint:
    name: Test & Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Force pnpm error for testing
        if: github.event_name == 'workflow_dispatch'
        run: pnpm nonexistent-command
      - name: Ensure build cache directories exist
        run: mkdir -p .vite node_modules/.cache && touch .eslintcache
      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            .vite
            node_modules/.cache
            .eslintcache
          key: build-${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            build-${{ runner.os }}-node-${{ matrix.node-version }}-
      - name: Run linter
        run: pnpm run lint
        env:
          ESLINT_CACHE: .eslintcache
      - name: Run tests
        run: pnpm run test:ci

      - name: Upload debug logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-and-lint-debug-logs-${{ github.run_number }}
          path: |
            ~/.npm/_logs/
            ~/.pnpm-debug.log
            ~/.pnpm/
            .eslintcache

  deploy-preview:
    name: Deploy Preview and Update GitHub Status
    needs: test-and-lint
    runs-on: ubuntu-latest
    environment:
      name: Preview
      url: ${{ steps.deploy_step.outputs.preview_url }}

    permissions:
      deployments: write
      pull-requests: write

    steps:
      # --- FASE 1: CRIAR O DEPLOYMENT NO GITHUB (STATUS "PENDING") ---
      - name: Create GitHub Deployment
        id: deployment
        uses: bobheadxi/deployments@v1.5.0
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: Preview
          ref: ${{ github.event.pull_request.head.sha }}
          override: true

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Ensure Vercel cache directory exists
        run: mkdir -p ~/.vercel && touch ~/.vercel/.gitkeep

      - name: Cache Vercel CLI
        uses: actions/cache@v4
        with:
          path: ~/.vercel
          key: vercel-cli-${{ runner.os }}
          restore-keys: |
            vercel-cli-${{ runner.os }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      # --- FASE 2: EXECUTAR O DEPLOY NA VERCEL ---
      - name: Deploy to Vercel and Capture URL
        id: deploy_step
        run: |
          DEPLOY_COMMAND="vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}"

          if DEPLOY_URL=$($DEPLOY_COMMAND); then
            echo "Deployment successful."
            echo "preview_url=$DEPLOY_URL" >> $GITHUB_OUTPUT
          else
            DEPLOY_STATUS=$?
            echo "Error: Vercel deploy failed with exit code $DEPLOY_STATUS."
            exit $DEPLOY_STATUS
          fi

      - name: Upload debug logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: deploy-preview-debug-logs-${{ github.run_number }}
          path: |
            ~/.vercel/
            ~/.npm/_logs/

      - name: Find Previous Comment
        uses: peter-evans/find-comment@v3
        id: find_comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: "ðŸš€ Vercel Preview Deployment"

      - name: Create or Update PR Comment
        uses: peter-evans/create-or-update-comment@v5
        with:
          comment-id: ${{ steps.find_comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### ðŸš€ Vercel Preview Deployment
            A prÃ©-visualizaÃ§Ã£o para este PR foi atualizada.

            | Recurso | Link |
            |---|---|
            | **ðŸ”— URL de Preview** | [URL de Preview](${{ steps.deploy_step.outputs.preview_url }}) |
            | **ðŸ“œ Logs do Deploy** | [Ver logs da Action](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) |

            ---
            *Commit: `${{ github.event.pull_request.head.sha }}`*
          edit-mode: replace

      # --- FASE 3: ATUALIZAR O STATUS FINAL DO DEPLOYMENT (SUCESSO OU FALHA) ---
      - name: Update GitHub Deployment Status
        if: always()
        uses: bobheadxi/deployments@v1.5.0
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          env: Preview
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: ${{ steps.deploy_step.outputs.preview_url }}

  upload-error-logs:
    name: Upload Error Logs
    needs: [test-and-lint, deploy-preview]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate error logs
        run: |
          mkdir -p debug-logs
          
          # Collect npm logs
          find ~/.npm/_logs/ -type f -name "*.log" -exec cp {} debug-logs/ \; 2>/dev/null || true
          
          # Collect pnpm logs
          find ~/.pnpm/ -type f -name "*.log" -exec cp {} debug-logs/ \; 2>/dev/null || true
          find ~/.pnpm/ -type f -name "*debug*" -exec cp {} debug-logs/ \; 2>/dev/null || true
          
          # Collect vercel logs
          find ~/.vercel/ -type f -name "*.log" -exec cp {} debug-logs/ \; 2>/dev/null || true
          
          # Collect temporary logs from /tmp
          find /tmp -type f -name "node-*" -exec cp {} debug-logs/ \; 2>/dev/null || true
          find /tmp -type f -name "npm-*" -exec cp {} debug-logs/ \; 2>/dev/null || true
          find /tmp -type f -name "pnpm-*" -exec cp {} debug-logs/ \; 2>/dev/null || true
          find /tmp -type f -name "vercel-*" -exec cp {} debug-logs/ \; 2>/dev/null || true
          
          # If no logs found, create a placeholder
          if [ -z "$(ls -A debug-logs 2>/dev/null)" ]; then
            echo "No log files found in common locations" > debug-logs/no-logs-found.txt
            echo "Checked locations:" >> debug-logs/no-logs-found.txt
            echo "- ~/.npm/_logs/" >> debug-logs/no-logs-found.txt
            echo "- ~/.pnpm/" >> debug-logs/no-logs-found.txt
            echo "- ~/.vercel/" >> debug-logs/no-logs-found.txt
            echo "- /tmp/ (node-*, npm-*, pnpm-*, vercel-*)" >> debug-logs/no-logs-found.txt
          fi

      - name: Upload error logs
        if: needs.test-and-lint.result == 'failure' || needs.deploy-preview.result == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: error-debug-logs-preview-${{ github.run_number }}
          path: debug-logs/
          retention-days: 30

name: Preview Environment

# Workflow para deploy do ambiente de preview/staging
# Executado em:
# - Pull Requests (para preview de mudanÃ§as)
# - Push em branches release/* (para testes de release)
# Realiza testes, linting, build, deploy para Vercel (ambiente preview)
# e atualizaÃ§Ã£o automÃ¡tica de comentÃ¡rios nos PRs

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - release/**
  workflow_dispatch:

jobs:
  test-and-lint:
    uses: ./.github/workflows/reusable-test-and-lint.yml
    with:
      node-version: "22.x"

  deploy-preview:
    uses: ./.github/workflows/reusable-deploy-vercel.yml
    with:
      environment: preview
      ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
      prebuilt: true
    secrets:
      vercel-token: ${{ secrets.VERCEL_TOKEN }}
      github-token: ${{ secrets.GITHUB_TOKEN }}

  update-pr-comment:
    if: github.event_name == 'pull_request'
    name: Update PR Comment
    needs: deploy-preview
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Find Previous Comment
        uses: peter-evans/find-comment@v3
        id: find_comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: "ðŸš€ Vercel Preview Deployment"

      - name: Create or Update PR Comment
        uses: peter-evans/create-or-update-comment@v5
        with:
          comment-id: ${{ steps.find_comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### ðŸš€ Vercel Preview Deployment
            A prÃ©-visualizaÃ§Ã£o para este PR foi atualizada.

            | Recurso | Link |
            |---|---|
            | **ðŸ”— URL de Preview** | [URL de Preview](${{ needs.deploy-preview.outputs.deployment_url }}) |
            | **ðŸ“œ Logs do Deploy** | [Ver logs da Action](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) |

            ---
            *Commit: `${{ github.event.pull_request.head.sha }}`*
          edit-mode: replace

  update-version:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "pnpm"

      - name: Extract version from branch name
        id: extract_version
        run: |
          BRANCH_NAME="${{ github.ref }}"
          VERSION=$(echo "$BRANCH_NAME" | sed 's|refs/heads/release/||')
          BETA_VERSION="${VERSION}-beta.${{ github.run_id }}"
          echo "VERSION=$BETA_VERSION" >> $GITHUB_ENV
          echo "TAG_VERSION=v$BETA_VERSION" >> $GITHUB_ENV

      - name: Check if tag already exists
        id: check_tag
        run: |
          git fetch --tags
          if git rev-parse "refs/tags/${{ env.TAG_VERSION }}" >/dev/null 2>&1; then
            echo "Tag ${{ env.TAG_VERSION }} already exists. Skipping release."
            echo "SKIP_ALL=true" >> $GITHUB_OUTPUT
          else
            echo "Tag ${{ env.TAG_VERSION }} does not exist. Proceeding with release."
            echo "SKIP_ALL=false" >> $GITHUB_OUTPUT
          fi

      - name: Update version and create beta tag
        if: steps.check_tag.outputs.SKIP_ALL == 'false'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          pnpm version ${{ env.VERSION }} --no-git-tag-version
          git add package.json pnpm-lock.yaml
          git commit -m "chore: Bump version to ${{ env.VERSION }}"
          git tag ${{ env.TAG_VERSION }} -m "Beta Release ${{ env.TAG_VERSION }}"
          git push
          git push origin ${{ env.TAG_VERSION }}

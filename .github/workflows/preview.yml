name: Vercel Preview Deployment

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  test-and-lint:
    name: Test & Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Run linter
        run: pnpm run lint
      - name: Run tests
        run: pnpm run test:ci

  deploy-preview:
    name: Deploy Preview and Update GitHub Status
    needs: test-and-lint
    runs-on: ubuntu-latest
    environment:
      name: Preview
      url: ${{ steps.deploy_step.outputs.preview_url }}

    permissions:
      deployments: write
      pull-requests: write

    steps:
      # --- FASE 1: CRIAR O DEPLOYMENT NO GITHUB (STATUS "PENDING") ---
      - name: Create GitHub Deployment
        id: deployment
        uses: bobheadxi/deployments@v1.5.0
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: Preview
          ref: ${{ github.event.pull_request.head.sha }}
          override: true

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      # --- FASE 2: EXECUTAR O DEPLOY NA VERCEL ---
      - name: Deploy to Vercel and Capture URL
        id: deploy_step
        run: |
          DEPLOY_COMMAND="vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}"

          if DEPLOY_URL=$($DEPLOY_COMMAND); then
            echo "Deployment successful."
            echo "preview_url=$DEPLOY_URL" >> $GITHUB_OUTPUT
          else
            DEPLOY_STATUS=$?
            echo "Error: Vercel deploy failed with exit code $DEPLOY_STATUS."
            exit $DEPLOY_STATUS
          fi

      - name: Find Previous Comment
        uses: peter-evans/find-comment@v3
        id: find_comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: "ðŸš€ Vercel Preview Deployment"

      - name: Create or Update PR Comment
        uses: peter-evans/create-or-update-comment@v5
        with:
          comment-id: ${{ steps.find_comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### ðŸš€ Vercel Preview Deployment
            A prÃ©-visualizaÃ§Ã£o para este PR foi atualizada.

            | Recurso | Link |
            |---|---|
            | **ðŸ”— URL de Preview** | [URL de Preview](${{ steps.deploy_step.outputs.preview_url }}) |
            | **ðŸ“œ Logs do Deploy** | [Ver logs da Action](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) |

            ---
            *Commit: `${{ github.event.pull_request.head.sha }}`*
          edit-mode: replace

      # --- FASE 3: ATUALIZAR O STATUS FINAL DO DEPLOYMENT (SUCESSO OU FALHA) ---
      - name: Update GitHub Deployment Status
        if: always()
        uses: bobheadxi/deployments@v1.5.0
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          env: Preview
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: ${{ steps.deploy_step.outputs.preview_url }}

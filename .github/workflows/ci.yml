name: CI/CD Pipeline com Tagging

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # -----------------------------------------------------------------
  # JOB 1: Apenas Testa e Linta
  # -----------------------------------------------------------------
  test-and-lint:
    name: Test & Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm run lint

      - name: Run tests
        run: pnpm run test:ci

  # -----------------------------------------------------------------
  # JOB 2: Deploy para Produção (Vercel)
  # -----------------------------------------------------------------
  deploy-production:
    name: Deploy to Production
    needs: test-and-lint
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      deployments: write
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  # -----------------------------------------------------------------
  # JOB 3: Deploy de Preview
  # -----------------------------------------------------------------
  deploy-preview:
    name: Deploy Preview
    needs: test-and-lint
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      deployments: write
    if: github.event_name == 'pull_request' || (github.ref == 'refs/heads/develop' && github.event_name == 'push')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

      - name: Get Repo ID
        if: github.event_name == 'pull_request'
        run: |
          REPO_ID=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }} | jq -r .id)
          echo "REPO_ID=$REPO_ID" >> $GITHUB_ENV

      - name: Notify Vercel for PR Comment (if PR)
        if: github.event_name == 'pull_request'
        run: |
          curl -X POST "https://api.vercel.com/v13/deployments" \
            -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "name": "mrdeveloper",
              "source": "cli",
              "gitSource": {
                "type": "github",
                "repo": "${{ github.repository }}",
                "ref": "${{ github.head_ref }}",
                "sha": "${{ github.sha }}",
                "repoId": ${{ env.REPO_ID }}
              },
              "target": "preview"
            }'

      - name: Notify Vercel for PR Comment (if PR)
        if: github.event_name == 'pull_request'
        run: |
          DEPLOY_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} | grep -o 'https://[^ ]*')
          curl -X POST "https://api.vercel.com/v13/deployments" \
            -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "name": "mrdeveloper",
              "source": "cli",
              "gitSource": {
                "type": "github",
                "repo": "JaegerCaiser/mrdeveloper",
                "ref": "${{ github.head_ref }}",
                "sha": "${{ github.sha }}"
              },
              "target": "preview"
            }'

  # -----------------------------------------------------------------
  # JOB 4: Criar Tag de Versão (Sem mudanças)
  # -----------------------------------------------------------------
  tag-release:
    name: Tag Release
    needs: deploy-production
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from package.json
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "TAG_VERSION=v$VERSION" >> $GITHUB_ENV

      - name: Check if tag already exists
        run: |
          if git ls-remote --tags origin | grep -q "refs/tags/${TAG_VERSION}"; then
            echo "Tag $TAG_VERSION already exists. Skipping..."
            echo "SKIP_TAG=true" >> $GITHUB_ENV
          else
            echo "Tag $TAG_VERSION does not exist. Proceeding..."
            echo "SKIP_TAG=false" >> $GITHUB_ENV
          fi

      - name: Create and Push Tag
        if: env.SKIP_TAG == 'false'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag $TAG_VERSION -m "Release $TAG_VERSION"
          git push origin $TAG_VERSION
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # -----------------------------------------------------------------
  # JOB 1: Testa e Linta (sem build)
  # -----------------------------------------------------------------
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm run lint

      - name: Run tests
        run: pnpm run test:ci
      
      # Removemos os passos de 'build' e 'upload-artifact' daqui.
      # Este job é apenas um portão de qualidade.

  # -----------------------------------------------------------------
  # JOB 2: Deploy para Produção (Vercel)
  # -----------------------------------------------------------------
  deploy-production:
    name: Deploy to Production
    needs: test # Depende apenas do job de teste
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Precisamos instalar o ambiente de build aqui
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      # Removemos o 'download-artifact'

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          # Deixamos a Vercel Action rodar o build
          vercel-args: "--prod" 

  # -----------------------------------------------------------------
  # JOB 3: Deploy de Preview
  # -----------------------------------------------------------------
  deploy-preview:
    name: Deploy Preview
    needs: test # Depende apenas do job de teste
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.ref == 'refs/heads/develop' && github.event_name == 'push')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Precisamos instalar o ambiente de build aqui
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Removemos o 'download-artifact'

      - name: Deploy to Vercel (Preview)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          # Deixamos a Vercel Action rodar o build
          vercel-args: "" # Argumento vazio para deploy de preview


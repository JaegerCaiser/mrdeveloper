name: CI/CD Pipeline com Tagging

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # -----------------------------------------------------------------
  # JOB 1: Apenas Testa e Linta
  # -----------------------------------------------------------------
  test-and-lint:
    name: Test & Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm run lint

      - name: Run tests
        run: pnpm run test:ci

  # -----------------------------------------------------------------
  # JOB 2: Deploy para Produção (Vercel)
  # -----------------------------------------------------------------
  deploy-production:
    name: Deploy to Production
    needs: test-and-lint
    runs-on: ubuntu-latest
    permissions:
      deployments: write
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          github-environment: Production
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: "--prod"

  # -----------------------------------------------------------------
  # JOB 3: Deploy de Preview
  # -----------------------------------------------------------------
  deploy-preview:
    name: Deploy Preview
    needs: test-and-lint
    runs-on: ubuntu-latest
    permissions:
      deployments: write
    if: github.event_name == 'pull_request' || (github.ref == 'refs/heads/develop' && github.event_name == 'push')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Deploy to Vercel (Preview)
        uses: amondnet/vercel-action@v25
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          github-environment: Preview
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: ""

  # -----------------------------------------------------------------
  # JOB 4: Criar Tag de Versão (Sem mudanças)
  # -----------------------------------------------------------------
  tag-release:
    name: Tag Release
    needs: deploy-production
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from package.json
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "TAG_VERSION=v$VERSION" >> $GITHUB_ENV

      - name: Check if tag already exists
        run: |
          if git ls-remote --tags origin | grep -q "refs/tags/${TAG_VERSION}"; then
            echo "Tag $TAG_VERSION already exists. Skipping..."
            echo "SKIP_TAG=true" >> $GITHUB_ENV
          else
            echo "Tag $TAG_VERSION does not exist. Proceeding..."
            echo "SKIP_TAG=false" >> $GITHUB_ENV
          fi

      - name: Create and Push Tag
        if: env.SKIP_TAG == 'false'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag $TAG_VERSION -m "Release $TAG_VERSION"
          git push origin $TAG_VERSION
